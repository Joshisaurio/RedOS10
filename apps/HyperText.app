// @SpieleTyp's and @KROKOBIL's HyperText editor                                                                                                              
// var "window":                                 window
// vars "w_[window name]_main":                  window main container
// vars with "w_[window name]_[ui element name]: ui elements

/////////////////////MAIN STUFF//////////////////////

// on start of the app
def init() {
    global window = window(100, 150)
    window.minSize(200, 150)
    window.title = "HyperText"
    global window_state = "start"

    //vars for smooth scaling
    global resize = true
    global target_size_x = 250
    global target_size_y = 310
    global actual_size_x = 100
    global actual_size_y = 150

    //template script content
    global license = "// Automatically generated by the HyperText Code Editor, license: @SpieleTyp and @KROKOBIL"
    global template_script = license + "\\n\\n// on start of the app\\ndef init() {\\n    global window = window()\\n    window.center()\\n}\\n\\n// every frame\\ndef frame() {\\n    \\n}"
    // Using slash n breaks it

    global project_name = ""
    global project_content = ""
    global project_data_file = "project_data.hyp"
    global project_path = ""
    global root_path = "red_os/user/HyperText"

    if(!os.exists_path(root_path)) {
        os.add_folder("red_os/user", "HyperText")
    }

    //color variables
    global primary_color = "#FF4060"
    global background_brighter = 0.1

    open_start_window()
}

// every frame
def frame() {
    resize()
    if (window_state == "editor") {
        project_content = w_editor_editscriptinput.text
        os.write_file(project_path + "/" + project_name + ".app", project_content)
    } elif (window_state == "start") {
    } elif (window_state == "openfile") {
    }
}


////////////////////RESIZING WINDOWS//////////////////

//set the resize paramters
def start_resize(size_x, size_y) {
    resize = true
    target_size_x = size_x
    target_size_y = size_y
}
//calculate and set the windows smooth size
def resize() {
    if (resize == true) {
        actual_size_x = actual_size_x + (target_size_x - actual_size_x) * 0.3
        actual_size_y = actual_size_y + (target_size_y - actual_size_y) * 0.3
        if (round(actual_size_x) == target_size_x) {
            actual_size_x = target_size_x
            if (round(actual_size_y) == target_size_y) {
                actual_size_y = target_size_y
                resize = false
            }
        }
        window.size(actual_size_x, actual_size_y)
        window.center()
    }
}


//////////////////////CALLBACKS///////////////////////

//when the create button is clicked in newfile window
def w_newfile_create() {
    project_name = w_newfile_filename.text
    project_path = root_path + "/" + project_name
    os.add_folder(root_path, project_name)
    last_edited = os.month + "/" + os.date + "/" + os.year
    os.add_file(project_path, project_data_file, last_edited)
    if (w_newfile_templateswitch.state == 1) {
        script = template_script
    } else {
        script = license
    }
    os.add_file(project_path, project_name + ".app", script)
    project_content = script
    open_editor_window()
}

//when a file is clicked in openfile window
def w_openfile_fileclicked(folder_name) {
    project_name = folder_name
    project_path = root_path + "/" + project_name
    project_content = os.read_file(project_path + "/" + folder_name + ".app")
    open_editor_window()
}


///////////////WINDOW INITIALIZATIONS//////////////////

//the start window is opened when app is started
def open_start_window() {
    window_state = "start"
    window.delete_children()
    start_resize(250, 310)
    w_start_main = container()

    w_start_recentlabel = title("Recent Files:")
    w_start_main.add(w_start_recentlabel)

    global w_start_recentfiles = vScrollContainer()
    w_start_recentfiles.margin(35, 10, 45)
    w_start_recentfiles.height = "fill"
    w_start_recentfiles.theme = background_brighter
    folder_list = os.list_folder(root_path)
    if (folder_list.length > 0) {
        folder_list_idx = 0
        while (folder_list_idx < folder_list.length) {
            folder_list_idx += 1
        }
        i = 0
        depth = 0
        while (i < folder_list.length) {
            if (folder_list.get(i) == 0) { // FOLDER END
                depth -= 1
            } elif (folder_list.get(i) == 1) { // FOLDER
                if (depth == 0) {
                    folder_name = folder_list.get(i+1)
                    content_length = os.read_file(root_path + "/" + folder_name + "/" + folder_name + ".app").length
                    edit_date = os.read_file(root_path + "/" + folder_name + "/project_data.hyp")
                    w_start_recentfiles.add(file(folder_name, content_length, edit_date))
                }
                i += 1
                depth += 1
            } elif (folder_list.get(i) == 2) { // FILE
                i += 2
            }
            i += 1
        }
    } else {  
        w_openfile_nofiles = label("No Recent Files")
        w_openfile_nofiles.margin(30)
        w_openfile_nofiles.align = 0.5
        w_start_recentfiles.add(w_openfile_nofiles)
    }
    w_start_main.add(w_start_recentfiles)

    w_start_buttons = hcontainer()
    w_start_buttons.margin("", 10, 10)
    w_start_buttons.height = "shrink"
    w_start_new_button = button("New File", "open_newfile_window()")
    w_start_new_button.marginRight = 5
    w_start_new_button.minHeight = 25
    w_start_new_button.theme = primary_color
    w_start_buttons.add(w_start_new_button)
    w_start_open_button = button("Open File", "open_openfile_window()")
    w_start_open_button.marginLeft = 5
    w_start_open_button.theme = primary_color
    w_start_open_button.minHeight = 25
    w_start_buttons.add(w_start_open_button)
    w_start_main.add(w_start_buttons)

    window.add(w_start_main)
}
//the openfile window is opened when user wants to choose a file in the redos/user folder
def open_openfile_window() {
    os.run_code("filesystem", "open_file(\".app\", \"red_os/apps\", \"HyperText\", \"open_file\")")
}

def open_file(path) {
    project_name = path.split("/").get(-1).split(".").get(0)
    project_path = root_path + "/" + project_name
    os.add_folder(root_path, project_name)
    last_edited = os.month + "/" + os.date + "/" + os.year
    os.add_file(project_path, project_data_file, last_edited)
    script = os.read_file(path)
    os.add_file(project_path, project_name + ".app", script)
    project_content = script
    open_editor_window()
}

//the newfile window is opened when user wants to create a new file
def open_newfile_window() {
    window_state = "newfile"
    window.delete_children()
    start_resize(155, 170)

    w_newfile_main = container()
    w_newfile_createtitle = title("Create New File:")
    w_newfile_main.add(w_newfile_createtitle)

    w_newfile_templateswitchc = container()
    w_newfile_templateswitchc.margin(35, 10, "")
    w_newfile_templateswitchc.height = "shrink"
    w_newfile_templateswitchc.theme = background_brighter
    global w_newfile_templateswitch = switch("Use Template")
    w_newfile_templateswitch.margin(3, 8)
    w_newfile_templateswitch.state = 1
    w_newfile_templateswitchc.add(w_newfile_templateswitch)
    w_newfile_main.add(w_newfile_templateswitchc)

    w_newfile_filenamec = container()
    w_newfile_filenamec.margin(63, 10, "")
    w_newfile_filenamec.height = "shrink"
    w_newfile_filenamec.theme = background_brighter
    w_newfile_settingfilename = label("Filename", 9)
    w_newfile_settingfilename.margin(8, 8, "")
    w_newfile_filenamec.add(w_newfile_settingfilename)
    file_name = "redos_app_" + round(rand() * 10000)
    global w_newfile_filename = input(file_name, 10)
    w_newfile_filename.margin(20, 0, 4, 10)
    w_newfile_filenamec.add(w_newfile_filename)
    w_newfile_main.add(w_newfile_filenamec)

    w_newfile_filenameextra = label("(Filename extension will be .app)", 7)
    w_newfile_filenameextra.margin(110, 10, "")
    w_newfile_filenameextra.align = 0.5
    w_newfile_main.add(w_newfile_filenameextra)

    w_newfile_buttons = hcontainer()
    w_newfile_buttons.margin("", 10, 10)
    w_newfile_buttons.height = "shrink"
    w_newfile_create = button("Create", "w_newfile_create()")
    w_newfile_create.marginRight = 2
    w_newfile_create.minHeight = 20
    w_newfile_create.theme = primary_color
    w_newfile_buttons.add(w_newfile_create)
    w_newfile_cancel = button("Cancel", "open_start_window()")
    w_newfile_cancel.marginLeft = 2
    w_newfile_cancel.theme = primary_color
    w_newfile_cancel.minHeight = 20
    w_newfile_buttons.add(w_newfile_cancel)
    w_newfile_main.add(w_newfile_buttons)

    window.add(w_newfile_main)
}
//the real editor window
def open_editor_window() {
    window_state = "editor"
    window.delete_children()
    start_resize(440, 160*2-28)
    w_editor_tabs = tabs()
    w_editor_tabs.sideWidth = 60

    w_editor_editmain = container()

    window.title("HyperText - " + project_name)

    w_editor_editscriptcontainer = container()
    w_editor_editscriptcontainer.margin(10)
    w_editor_editscriptcontainer.theme = background_brighter
    w_editor_editscriptcontainer.height = "fill"
    global w_editor_editscriptinput = editor(project_content, 13, 0)
    w_editor_editscriptinput.margin(10, 10, "")
    w_editor_editscriptinput.fill()
    w_editor_editscriptcontainer.add(w_editor_editscriptinput)
    w_editor_editmain.add(w_editor_editscriptcontainer)

    w_editor_tabs.add(w_editor_editmain, "Edit")

    w_editor_settingsmain = vScrollContainer()
    w_editor_settingsmain.margin(10)

    w_editor_settingsnamelabel = label("Project name: \\i" + project_name + "\\i", 12, 0, 1)
    w_editor_settingsnamelabel.margin(5)
    w_editor_settingsmain.add(w_editor_settingsnamelabel)

    w_editor_settingsruninfolabel = label("The button below will change the app's code immediately. However, you may want to stop the app first to allow all changes to take effect.", 10, 0, 1)
    w_editor_settingsruninfolabel.margin(10, 5, 3)
    w_editor_settingsmain.add(w_editor_settingsruninfolabel)

    w_editor_settingsrunbutton = button("Compile and Run", "run()")
    w_editor_settingsrunbutton.margin(5)
    w_editor_settingsrunbutton.theme = primary_color
    w_editor_settingsmain.add(w_editor_settingsrunbutton)

    w_editor_settingsexportinfolabel = label("Click the button below to show a list. You can right click the list to export the project or import a file from your computer. Click the button again to import and hide the list.", 10, 0, 1)
    w_editor_settingsexportinfolabel.margin(10, 5, 3)
    w_editor_settingsmain.add(w_editor_settingsexportinfolabel)

    global w_editor_settingsexportbutton = button("Export", "toggle_export_list()")
    w_editor_settingsexportbutton.margin(5)
    w_editor_settingsexportbutton.theme = primary_color
    w_editor_settingsmain.add(w_editor_settingsexportbutton)

    w_editor_tabs.add(w_editor_settingsmain, "Settings")

    window.add(w_editor_tabs)
}


////////////////USEFULL HELPER FUNCTIONS////////////////

//returns a preformatted title object
def title(text) {
    title = label(text, 15)
    title.margin(10, 10, "")
    return title
}

def toggle_export_list() {
    if (os.list_visible) {
        // Import
        list = os.get_list()
        if (list.length > 0) {
            if (list.get(0) == "") {
                list.delete(0)
            }
            w_editor_editscriptinput.text = list.join("\\n")
        }
        w_editor_editscriptinput.focus = false
        os.hide_list()
        w_editor_settingsexportbutton.text = "Export"
    } else {
        // Export
        text = w_editor_editscriptinput.text
        list = text.split_newline()
        list.insert("", 0)
        os.show_list(list)
        w_editor_settingsexportbutton.text = "Import"
    }
}

def onClose() {
    os.hide_list()
}

def run() {
    text = w_editor_editscriptinput.text
    os.write_file("red_os/apps/" + project_name + ".app", text)
    os.compile_app(project_name)
    os.open_app(project_name)
}

//returns a preformatted file object
def file(name, number_tokens, last_edited) {
    container = container()
    container.onClick = "w_openfile_fileclicked(\"" + name + "\")"
    container.height = 36
    container.width = "fill"
    container.theme = 0
    container.margin(3)
    namel = label(name, 12)
    namel.margin(6, 6, "")
    namel.align = 0
    container.add(namel)
    last_editedl = label(last_edited, 12)
    last_editedl.margin(6, 6, "")
    last_editedl.align = 1
    container.add(last_editedl)

    number_tokensl = label("project size: " + number_tokens, 8)
    number_tokensl.margin("", 6, 6)
    number_tokensl.align = 1
    container.add(number_tokensl)

    line = container()
    line.margin("", 0, 0)
    line.height = 3
    line.width = "fill"
    line.theme = primary_color
    //container.add(line)

    return container
}