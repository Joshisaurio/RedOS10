// @SpieleTyp's HyperText editor                                                                                                              
// var "window":                                 window
// vars "w_[window name]_main":                  window main container
// vars with "w_[window name]_[ui element name]: ui elements

/////////////////////MAIN STUFF//////////////////////

//on start of the app
def init() {
    global window = window(100, 150)
    window.minSize(150, 150)
    global window_state = "start"

    //vars for smooth scaling
    global resize = true
    global target_size_x = 250
    global target_size_y = 310
    global actual_size_x = 100
    global actual_size_y = 150

    //template script content
    global license = "Automatically Generated by the HyperText Code Editor, license: @SpieleTyp"
    global template_script = license
    // Using slash n breaks it

    global project_name = ""
    global project_content = ""
    global project_data_file = "project_data.hyp"
    global project_path = ""
    global root_path = "red_os/user/HyperText Documents" // Suggestion for Spieletyp, imo red_os/user/Documents/Hypertext makes more sense

    os.add_folder("red_os/user", "HyperText Documents")

    //autosave_interval and timer
    autosave = 10000 //-1 for no autosaving / 10 secs in ms
    last_autosave_time = 0 //the time it was last saved

    //color variables
    global primary_color = "#FF4060"
    global background_brighter = 0.1

    os.print("HyperText running")
    open_start_window()
}
//every frame
def frame() {
    resize()
    if (window_state == "editor") {
        os.write_file(project_path + "/" + project_name + ".app", project_content)
    } elif (window_state == "start") {

    } elif (window_state == "newfile") {

    }
}


////////////////////RESIZING WINDOWS//////////////////

//set the resize paramters
def start_resize(size_x, size_y) {
    resize = true
    target_size_x = size_x
    target_size_y = size_y
}
//calculate and set the windows smooth size
def resize() {
    if (resize == true) {
        actual_size_x = actual_size_x + (target_size_x - actual_size_x) * 0.3
        actual_size_y = actual_size_y + (target_size_y - actual_size_y) * 0.3
        if (round(actual_size_x) == target_size_x) {
            actual_size_x = target_size_x
            if (round(actual_size_y) == target_size_y) {
                actual_size_y = target_size_y
                resize = false
            }
        }
        window.size(actual_size_x, actual_size_y)
        window.center()
    }
}


//////////////////////CALLBACKS///////////////////////

//when the create buttons is clicked in newfile window
def w_newfile_create() {
    project_name = w_newfile_filename.text
    project_path = root_path + "/" + project_name
    os.add_folder(root_path, project_name)
    last_edited = os.month + "/" + os.date + "/" + os.year
    os.add_file(project_path, project_data_file, last_edited)
    if (w_newfile_templateswitch.state == 1) {
        os.add_file(project_path, project_name + ".app", template_script)
        project_content = template_script
    }
    else {
        os.add_file(project_path, project_name + ".app", license)
        project_content = license
    }
    open_editor_window()
}

//when a file is clicked in openfile window
def w_openfile_fileclicked() {
    project_content = os.read(project_path + "/" + project_name + ".app")
    open_editor_window()
}


///////////////WINDOW INITIALIZATIONS//////////////////

//the start window is opened when app is started
def open_start_window() {
    window_state = "start"
    window.delete_children()
    start_resize(250, 310)
    w_start_main = container()

    w_start_recentlabel = title("Recent Files:")
    w_start_main.add(w_start_recentlabel)

    global w_start_recentfiles = vScrollContainer()
    w_start_recentfiles.margin(35, 10, 45)
    w_start_recentfiles.height = "fill"
    w_start_recentfiles.theme = background_brighter
    w_start_nofiles = label("No Recent Files")
    w_start_nofiles.margin(30)
    w_start_nofiles.align = 0.5
    w_start_recentfiles.add(w_start_nofiles)
    w_start_main.add(w_start_recentfiles)

    w_start_buttons = hcontainer()
    w_start_buttons.margin("", 10, 10)
    w_start_buttons.height = "shrink"
    w_start_new_button = button("New File", "open_newfile_window()")
    w_start_new_button.marginRight = 5
    w_start_new_button.minHeight = 25
    w_start_new_button.theme = primary_color
    w_start_buttons.add(w_start_new_button)
    w_start_open_button = button("Open File", "open_openfile_window()")
    w_start_open_button.marginLeft = 5
    w_start_open_button.theme = primary_color
    w_start_open_button.minHeight = 25
    w_start_buttons.add(w_start_open_button)
    w_start_main.add(w_start_buttons)

    window.add(w_start_main)
}
//the openfile window is opened when user wants to choose a file in the redos/user folder
def open_openfile_window() {
    os.run_code("filesystem", "open_file(\".app\", \"" + root_path + "\", \"HyperText\", \"open_file\")")
}

def open_file(path) {
    os.print("File selected:")
    os.print(path)
}

//the newfile window is opened when user wants to create a new file
def open_newfile_window() {
    window_state = "newfile"
    window.delete_children()
    start_resize(155, 170)

    w_newfile_main = container()
    w_newfile_createtitle = title("Create New File:")
    w_newfile_main.add(w_newfile_createtitle)

    w_newfile_templateswitchc = container()
    w_newfile_templateswitchc.margin(35, 10, "")
    w_newfile_templateswitchc.height = "shrink"
    w_newfile_templateswitchc.theme = background_brighter
    global w_newfile_templateswitch = switch("Use Template")
    w_newfile_templateswitch.margin(3, 8)
    w_newfile_templateswitchc.add(w_newfile_templateswitch)
    w_newfile_main.add(w_newfile_templateswitchc)

    w_newfile_filenamec = container()
    w_newfile_filenamec.margin(63, 10, "")
    w_newfile_filenamec.height = "shrink"
    w_newfile_filenamec.theme = background_brighter
    w_newfile_settingfilename = label("Filename", 9)
    w_newfile_settingfilename.margin(8, 8, "")
    w_newfile_filenamec.add(w_newfile_settingfilename)
    file_name = "redos_app_" + round(rand() * 10000)
    global w_newfile_filename = input(file_name, 10)
    w_newfile_filename.margin(20, 0, 4, 10)
    w_newfile_filenamec.add(w_newfile_filename)
    w_newfile_main.add(w_newfile_filenamec)

    w_newfile_filenameextra = label("(Filename extension will be .app)", 7)
    w_newfile_filenameextra.margin(110, 10, "")
    w_newfile_filenameextra.align = 0.5
    w_newfile_main.add(w_newfile_filenameextra)

    w_newfile_buttons = hcontainer()
    w_newfile_buttons.margin("", 10, 10)
    w_newfile_buttons.height = "shrink"
    w_newfile_create = button("Create", "w_newfile_create()")
    w_newfile_create.marginRight = 2
    w_newfile_create.minHeight = 20
    w_newfile_create.theme = primary_color
    w_newfile_buttons.add(w_newfile_create)
    w_newfile_cancel = button("Cancel", "open_start_window()")
    w_newfile_cancel.marginLeft = 2
    w_newfile_cancel.theme = primary_color
    w_newfile_cancel.minHeight = 20
    w_newfile_buttons.add(w_newfile_cancel)
    w_newfile_main.add(w_newfile_buttons)

    window.add(w_newfile_main)
}
//the real editor window
def open_editor_window() {
    window_state = "editor"
    window.delete_children()
    start_resize(440, 160*2-28)
    w_editor_tabs = tabs()

    w_editor_editmain = container()

    w_editor_editfiletitle = title("Edit " + project_name)
    w_editor_editfiletitle.margin(10, 10, "")
    w_editor_editmain.add(w_editor_editfiletitle)

    w_editor_editscriptcontainer = container()
    w_editor_editscriptcontainer.margin(30, 10, 10)
    w_editor_editscriptcontainer.theme = background_brighter
    w_editor_editscriptcontainer.height = "fill"
    global w_editor_editscriptinput = editor(project_content, 13, 0)
    w_editor_editscriptinput.margin(10, 10, "")
    w_editor_editscriptinput.fill()
    w_editor_editscriptcontainer.add(w_editor_editscriptinput)
    w_editor_editmain.add(w_editor_editscriptcontainer)

    w_editor_tabs.add(w_editor_editmain, "Edit")

    w_editor_settingsmain = container()

    w_editor_tabs.add(w_editor_settingsmain, "Settings")

    window.add(w_editor_tabs)
}


////////////////USEFULL HELPER FUNCTIONS////////////////

//returns a preformatted title object
def title(text) {
    title = label(text, 15)
    title.margin(10, 10, "")
    return title
}